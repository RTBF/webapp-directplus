// Generated by CoffeeScript 1.4.0
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['application/config', 'application/views/mainView', 'application/models/app', 'vendors/socketio/socketio'], function(Config, MainView, App) {
  /*
      Gere les communication serveur
  */

  var Application;
  return Application = (function(_super) {

    __extends(Application, _super);

    Application.prototype.routes = {
      'home': 'homeScreen',
      'all/:page': 'allScreen',
      'conference/:orgid/:page': 'conferenceScreen',
      'slides/:orgid/:confid': 'slideScreen',
      '*actions': 'homeScreen'
    };

    function Application() {
      this.slScreen = __bind(this.slScreen, this);
      this.HaveFirstLoad = false;
      this.HaveConfFirstLoad = false;
      Application.__super__.constructor.call(this, this.routes);
    }

    Application.prototype.initialize = function() {
      var _this = this;
      this.socket = io.connect(Config.serverUrl);
      /*@router.on 'orgRoute', ()=>
        @connect()
      
      @router.on 'confRoute', (data)=>
        @socket.emit 'organisationChoosed', data
      
      @router.on 'slideRoute', (data)=>
      
      
        console.log 'app slideRoute id conf choosed: ', data
        @socket.emit 'conferenceChoosed', data
      */

      this.app = new App();
      this.mainView = new MainView({
        model: this.app
      });
      this.socket.on('organisations', function(data) {
        console.log('app organisations recieved: ', data);
        return _this.app.trigger("organisations", data);
      });
      this.socket.on('conferences', function(data) {
        console.log("app confList received", data);
        return _this.app.trigger('conferences', data);
      });
      this.socket.on('allconferences', function(data) {
        console.log("app allconfList received", data);
        return _this.app.trigger('allconferences', data);
      });
      this.socket.on('allNextPage', function(data, page) {
        return _this.app.trigger('allNextPage', data, page);
      });
      this.socket.on('conferencesNextPage', function(data, page) {
        return _this.app.trigger('conferencesNextPage', data, page);
      });
      this.socket.on('slides', function(data) {
        console.log('app slides received', data);
        return _this.app.trigger('slides', data);
      });
      this.socket.on('snext', function(data) {
        console.log("snext received");
        return _this.app.trigger('newSlide', data);
      });
      this.socket.on('sremove', function(data) {
        console.log("remove ask received");
        return _this.app.trigger('sremove', data);
      });
      this.socket.on('sreset', function(data) {
        console.log("reseting");
        localStorage.clear();
        $('#SlideList').empty();
        return _this.app.trigger('reseting', data);
      });
      this.socket.on('connect', function(data) {
        console.log("connected");
        return _this.mainView.trigger('ServerConnection', data);
      });
      this.socket.emit('user', '');
      this.on('route:conferenceScreen', function(orgid, page) {
        console.log("la page:", page);
        return _this.confScreen(orgid, page);
      });
      this.on('route:homeScreen', function() {
        console.log("what?");
        return _this.orgScreen(1);
      });
      this.on('route:allScreen', function(page) {
        console.log("la page:", page);
        return _this.orgScreen(page);
      });
      this.on('route:slideScreen', function(orgid, confid) {
        return _this.slScreen(orgid, confid, 1);
      });
      return Backbone.history.start();
    };

    Application.prototype.loadPageOneByOne = function(first, end) {
      var _this = this;
      console.log('first: ', first);
      if (first <= end) {
        if (this.app.loaded) {
          this.socket.emit('allConfs', first);
          this.app.loaded = false;
          first = first + 1;
        }
        return setTimeout(function() {
          return _this.loadPageOneByOne(first, end);
        }, 100);
      } else {
        this.HaveFirstLoad = true;
        return this.showConfs();
      }
    };

    Application.prototype.loadPageOneByOneConf = function(first, end, orgid) {
      var _this = this;
      console.log('first: ', first);
      console.log('end: ', end);
      console.log(this.app.get('organisations').get(this.app.get('orgChoose')).loaded);
      if (first <= end) {
        if (this.app.get('organisations').get(this.app.get('orgChoose')).loaded) {
          this.socket.emit('organisationChoosed', orgid, first);
          this.app.get('organisations').get(this.app.get('orgChoose')).loaded = false;
          first = first + 1;
        }
        return setTimeout(function() {
          return _this.loadPageOneByOneConf(first, end, orgid);
        }, 100);
      } else {
        this.HaveConfFirstLoad = true;
        return this.showConfs();
      }
    };

    Application.prototype.showConfs = function() {
      var _this = this;
      return $('.slides').fadeOut(function() {
        $('.confBlock').fadeIn();
        return _this.app.allLoaded = true;
      });
    };

    Application.prototype.orgScreen = function(page) {
      var _this = this;
      this.app.allLoaded = false;
      this.HaveConfFirstLoad = false;
      page = parseInt(page);
      console.log("hello: ", page);
      this.app.set('orgChoose', ' ');
      this.app.set('confChoosed', ' ');
      if (this.app.get('organisations').isEmpty()) {
        setTimeout(function() {
          return _this.orgScreen(page);
        }, 100);
      }
      if (this.app.get('organisations').isEmpty() === false) {
        if (page === 1) {
          this.HaveFirstLoad = true;
          this.app.trigger('home');
          this.socket.emit('allConfs', page);
          return this.showConfs();
        } else {
          if (this.HaveFirstLoad === false) {
            this.app.trigger('home');
            return this.loadPageOneByOne(1, page);
          } else {
            this.socket.emit('allConfs', page);
            return this.showConfs();
          }
        }
      }
    };

    Application.prototype.confScreen = function(orgid, page) {
      var _this = this;
      this.orgChoosed = true;
      this.app.allLoaded = false;
      this.HaveFirstLoad = false;
      console.log(page);
      page = parseInt(page);
      this.app.set('orgChoose', orgid);
      this.app.set('confChoosed', ' ');
      console.log("emmission choosed");
      if (this.app.get('organisations').isEmpty()) {
        setTimeout(function() {
          return _this.confScreen(orgid, page);
        }, 100);
      }
      if (this.app.get('organisations').isEmpty() === false) {
        if (page === 1) {
          this.HaveConfFirstLoad = true;
          this.app.get('organisations').get(this.app.get('orgChoose')).trigger('empty');
          this.socket.emit('organisationChoosed', orgid, page);
          this.showConfs();
        } else {
          if (this.HaveConfFirstLoad === false) {
            this.app.get('organisations').get(this.app.get('orgChoose')).trigger('empty');
            this.loadPageOneByOneConf(1, page, orgid);
          } else {
            this.socket.emit('organisationChoosed', orgid, page);
            this.showConfs();
          }
        }
        return this.orgChoose = true;
      }
    };

    Application.prototype.slScreen = function(orgid, confid, page) {
      var _this = this;
      this.app.allLoaded = false;
      this.HaveConfFirstLoad = false;
      this.HaveFirstLoad = false;
      this.app.set('orgChoose', orgid);
      this.app.set('confChoosed', confid);
      if (this.app.get('organisations').isEmpty()) {
        setTimeout(function() {
          return _this.slScreen(orgid, confid, page);
        }, 100);
      }
      if (this.app.get('organisations').isEmpty() === false) {
        if (typeof this.app.get('organisations').get(orgid) === 'undefined') {
          console.log('get org id est indefini');
          setTimeout(function() {
            return _this.slScreen(orgid, confid, page);
          }, 200);
        }
        if (typeof this.app.get('organisations').get(orgid) !== 'undefined') {
          if (typeof this.orgChoosed === 'undefined' || this.orgChoosed === false) {
            console.log("@orgChoosed is undefined");
            this.socket.emit('organisationChoosed', orgid, page);
            this.orgChoosed = true;
          }
          console.log("get orgid est defini: ");
          console.log(this.app.get('organisations').get(orgid));
          if (this.app.get('organisations').get(orgid).get('conferencesC').isEmpty()) {
            console.log("la liste des conferences est vide");
            setTimeout(function() {
              return _this.slScreen(orgid, confid, page);
            }, 2000);
          }
          if (this.app.get('organisations').get(orgid).get('conferencesC').isEmpty() === false) {
            if (typeof this.app.get('organisations').get(orgid).get('conferencesC').get(this.app.get('confChoosed')) === "undefined") {
              this.orgChoosed = false;
              setTimeout(function() {
                return _this.slScreen(orgid, confid, page++);
              }, 2000);
            }
            if (typeof this.app.get('organisations').get(orgid).get('conferencesC').get(this.app.get('confChoosed')) !== "undefined") {
              console.log("je suis lÃ ");
              this.socket.emit('conferenceChoosed', confid);
              return $('.confBlock').fadeOut(function() {
                return $('.slides').fadeIn();
              });
            }
          }
        }
      }
    };

    Application.prototype.connect = function() {
      return this.socket.emit('allConfs', '');
    };

    return Application;

  })(Backbone.Router);
});
