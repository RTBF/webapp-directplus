// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'backbone', 'application/collections/organisations', 'application/models/organisation'], function($, Backbone, Organisations, Organisation) {
  var App;
  return App = (function(_super) {

    __extends(App, _super);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.defaults = {
      organisations: new Organisations()
    };

    App.prototype.initialize = function() {
      this.on('organisations', function(data) {
        return this.restore(data);
      });
      this.on('conferences', function(data) {
        return this.restoreConf(data);
      });
      this.on('allconferences', function(data) {
        return this.restoreAllConf(data);
      });
      this.on('slides', function(data) {
        return this.restoreSlides(data);
      });
      this.on('newSlide', function(data) {
        return this.get('organisations').get(this.get('orgChoose')).get('conferencesC').get(this.get('confChoosed')).trigger('newSlide', data);
      });
      this.on('next', function() {
        return this.get('organisations').get(this.get('orgChoose')).get('conferencesC').get(this.get('confChoosed')).trigger('next');
      });
      this.on('previous', function() {
        return this.get('organisations').get(this.get('orgChoose')).get('conferencesC').get(this.get('confChoosed')).trigger('previous');
      });
      return this.on('sremove', function(data) {
        return this.get('organisations').get(this.get('orgChoose')).get('conferencesC').get(this.get('confChoosed')).trigger('sremove', data);
      });
    };

    App.prototype.restore = function(data) {
      var len, organisation, x, _i;
      this.get('organisations').reset();
      len = data.length - 1;
      if (len >= 0) {
        for (x = _i = 0; 0 <= len ? _i <= len : _i >= len; x = 0 <= len ? ++_i : --_i) {
          organisation = new Organisation(data[x]);
          organisation.set('id', data[x]._id);
          this.get('organisations').add(organisation);
        }
        return this.trigger('change:organisations');
      }
    };

    App.prototype.restoreAllConf = function(data) {
      var conf, len, _i, _len, _results,
        _this = this;
      len = data.length - 1;
      this.get('organisations').each(function(org) {
        return org.get('conferencesC').reset();
      });
      if (len >= 0) {
        _results = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          conf = data[_i];
          console.log(conf);
          _results.push(this.get('organisations').get(conf._orga).addConf(conf));
        }
        return _results;
      }
    };

    App.prototype.restoreConf = function(data) {
      var len;
      console.log(data);
      len = data.length - 1;
      if (len >= 0) {
        return this.get('organisations').get(data[0]._orga).restore(data);
      }
    };

    App.prototype.restoreSlides = function(data) {
      var len;
      console.log("data:", data);
      len = data.length - 1;
      if (len >= 0) {
        this.get('organisations').get(this.get('orgChoose')).get('conferencesC').get(data[0]._conf).restore(data);
        return this.set('confChoosed', data[0]._conf);
      }
    };

    App.prototype.organisationChoosed = function(id) {
      var organisationsFound;
      organisationsFound = this.get('organisations').where({
        _id: id
      });
      console.log(organisationsFound[0]);
      return this.set('organisation', organisationsFound[0]);
    };

    return App;

  })(Backbone.Model);
});
