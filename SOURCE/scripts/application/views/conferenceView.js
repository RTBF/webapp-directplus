// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'backbone', 'application/views/slideScreen'], function($, Backbone, SlideView) {
  var ConferenceView;
  return ConferenceView = (function(_super) {

    __extends(ConferenceView, _super);

    function ConferenceView() {
      return ConferenceView.__super__.constructor.apply(this, arguments);
    }

    ConferenceView.prototype.tagName = 'li';

    ConferenceView.prototype.className = 'conference';

    ConferenceView.prototype.template = _.template($('#conf-template').html());

    ConferenceView.prototype.events = {
      'click .conf-item ': 'choose'
    };

    ConferenceView.prototype.initialize = function() {
      this.listenTo(this.model, 'change:slidesC', this.render);
      return this.listenTo(this.model, 'new', this["new"]);
    };

    ConferenceView.prototype.render = function() {
      console.log("confView");
      this.$el.html(this.template(this.model.toJSON()));
      console.log(this.model.toJSON());
      this.setCountDown();
      $('#SlideList').children().remove();
      if ($('#SlideList').is(':empty')) {
        this.model.get('slidesC').each(function(slide) {
          var slideView;
          console.log(slide);
          console.log(slide.get('state'));
          slideView = new SlideView({
            model: slide
          });
          return slideView.render();
        });
      }
      return this;
    };

    ConferenceView.prototype["new"] = function() {
      var slide, slideView;
      console.log("render new");
      slide = this.model.get('slidesC').at(this.model.get('slidesC').length - 1);
      slideView = new SlideView({
        model: slide
      });
      slide = this.model.get('slidesC').where({
        state: 'future'
      });
      if (slide[0]) {
        return slideView.render();
      } else {
        console.log("future doesn't exist");
        return slideView["new"]();
      }
    };

    ConferenceView.prototype.choose = function() {
      var confid, href, orgid;
      console.log(this.model);
      confid = this.model.get('id');
      orgid = this.model.get('_orga');
      href = '/slides/' + orgid + '/' + confid;
      $(".slide").remove();
      return Backbone.history.navigate(href, {
        trigger: true
      });
    };

    ConferenceView.prototype.setCountDown = function() {
      var directDate, elt, id, intervalmilliseconde, timer, today, value,
        _this = this;
      id = '#' + this.model.get('id');
      timer = '#' + this.model.get('id') + ' .timer';
      directDate = new Date(this.model.get('date'));
      today = new Date();
      intervalmilliseconde = directDate.getTime() - today.getTime();
      if (intervalmilliseconde > 0) {
        $(timer).text(this.getIntervalTimer(intervalmilliseconde));
        return setTimeout(function() {
          return _this.setCountDown();
        }, 998);
      } else {
        console.log($(timer).html());
        if (typeof ($(timer).html()) === 'undefined') {
          return setTimeout(function() {
            return _this.setCountDown();
          }, 998);
        } else {
          $(timer).text("REVOIR");
          elt = $(id).parent();
          console.log("index: ", $('li.conference').index(elt));
          value = $('.conferenceList  .conference').first().height() * ($('.conferenceList .conference').index(elt) + 1);
          return $('#appcontainer').scrollTop(value);
        }
      }
    };

    ConferenceView.prototype.getIntervalTimer = function(intervalmilliseconde) {
      var day, hours, interval, minutes, secondes;
      day = parseInt(intervalmilliseconde / (1000 * 60 * 60 * 24));
      intervalmilliseconde = intervalmilliseconde - (day * 1000 * 60 * 60 * 24);
      hours = parseInt(intervalmilliseconde / (1000 * 60 * 60));
      intervalmilliseconde = intervalmilliseconde - (hours * 1000 * 60 * 60);
      minutes = parseInt(intervalmilliseconde / (1000 * 60));
      intervalmilliseconde = intervalmilliseconde - (minutes * 1000 * 60);
      secondes = parseInt(intervalmilliseconde / 1000.);
      interval = day + " DAYS " + hours + ":" + minutes + ":" + secondes;
      return interval;
    };

    return ConferenceView;

  })(Backbone.View);
});
