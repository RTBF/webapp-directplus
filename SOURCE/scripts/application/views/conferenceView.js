// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'backbone', 'application/views/slideScreen'], function($, Backbone, SlideView) {
  var ConferenceView;
  return ConferenceView = (function(_super) {

    __extends(ConferenceView, _super);

    function ConferenceView() {
      return ConferenceView.__super__.constructor.apply(this, arguments);
    }

    ConferenceView.prototype.tagName = 'li';

    ConferenceView.prototype.className = 'conf span4';

    ConferenceView.prototype.template = _.template($('#conf-template').html());

    ConferenceView.prototype.initialize = function() {
      this.listenTo(this.model, 'change:slidesC', this.render);
      return this.listenTo(this.model, 'new', this["new"]);
    };

    ConferenceView.prototype.render = function() {
      console.log("confView");
      this.$el.html(this.template(this.model.toJSON()));
      $('#SlideList').children().remove();
      if ($('#SlideList').is(':empty')) {
        this.model.get('slidesC').each(function(slide) {
          var slideView;
          console.log(slide);
          console.log(slide.get('state'));
          slideView = new SlideView({
            model: slide
          });
          return slideView.render();
        });
      }
      return this;
    };

    ConferenceView.prototype["new"] = function() {
      var slide, slideView;
      console.log("render new");
      slide = this.model.get('slidesC').at(this.model.get('slidesC').length - 1);
      slideView = new SlideView({
        model: slide
      });
      slide = this.model.get('slidesC').where({
        state: 'future'
      });
      if (slide[0]) {
        return slideView.render();
      } else {
        console.log("future doesn't exist");
        return slideView["new"]();
      }
    };

    return ConferenceView;

  })(Backbone.View);
});
